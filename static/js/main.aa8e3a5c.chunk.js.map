{"version":3,"sources":["InfoBox.js","Table.js","LineGraph.js","util/helper.js","Map.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","Title","Cases","Total","onClick","active","isRed","Card","className","CardContent","Typography","color","Table","countries","map","country","cases","key","numeral","format","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","CasesType","props","useState","setData","useEffect","a","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","casesTypeColors","hex","multiplier","recovered","deaths","sortData","sort","b","printSate","num","showDataOnMap","Circle","center","countryInfo","lat","long","pathOptions","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","Map","zoom","ChangeView","useMap","setView","MapContainer","TileLayer","attribution","url","App","setInputCountry","setCountries","setCountryInfo","TableInfo","setTableInfo","lng","MapCenter","setMapCenter","MapZoom","setMapZoom","mapCountries","setmapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa8e3a5c.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Card,CardContent,Typography} from \"@material-ui/core\";\r\nimport \"./infoBox.css\"\r\n\r\n function InfoBox({Title,Cases,Total,onClick,active,isRed}) {\r\n    return (\r\n        <Card className={`InfoBoxe ${active && 'infoBox--selected'} ${isRed && 'infoBox--isRed'}`} onClick={onClick}>\r\n            <CardContent>\r\n                <Typography color=\"textSecondary\" className=\"InfoBoxe_title\">{Title} </Typography>\r\n                <Typography  className={`InfoBoxe_Cases ${!isRed && 'infoBox--recovered'}`}>{Cases}</Typography>\r\n                <Typography color=\"textSecondary\" className=\"InfoBoxe_total\">{Total} Total</Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\nexport default InfoBox;","\r\nimport numeral from 'numeral';\r\nimport React from 'react';\r\nimport './Table.css';\r\n\r\n function Table({countries}) {\r\n    return (\r\n        <div className=\"Table\">\r\n            {countries.map(({country,cases,key})=>(\r\n                <tr key={key}>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\nexport default Table;","import React,{useEffect,useState} from 'react'\r\nimport numeral from 'numeral';\r\nimport {Line} from \"react-chartjs-2\";\r\nconst options = {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          return numeral(tooltipItem.value).format(\"+0,0\");\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          type: \"time\",\r\n          time: {\r\n            format: \"MM/DD/YY\",\r\n            tooltipFormat: \"ll\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            // Include a dollar sign in the ticks\r\n            callback: function (value, index, values) {\r\n              return numeral(value).format(\"0a\");\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n  const buildChartData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n      if (lastDataPoint) {\r\n        let newDataPoint = {\r\n          x: date,\r\n          y: data[casesType][date] - lastDataPoint,\r\n        };\r\n        chartData.push(newDataPoint);\r\n      }\r\n      lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n  };\r\n  \r\nfunction LineGraph({CasesType,...props}) {\r\n    const [data, setData] = useState({})\r\n    \r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n          await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then((response) => {\r\n              return response.json();\r\n            })\r\n            .then((data) => {\r\n              let chartData = buildChartData(data, CasesType);\r\n              setData(chartData);\r\n              console.log(chartData);\r\n              // buildChart(chartData);\r\n            });\r\n        };\r\n    \r\n        fetchData();\r\n      }, [CasesType]);\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph;\r\n","\r\nimport React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData=(data)=>{\r\n    const sortData=[...data];\r\n    return sortData.sort((a,b)=>(a.cases>b.cases?-1:1))\r\n\r\n}\r\n\r\nexport const printSate=(num)=>num?`${numeral(num).format(\"0.0a\")}`:\"+0\";\r\nexport const showDataOnMap = (data, casesType) =>\r\ndata.map((country) => (\r\n  <Circle\r\n    center={[country.countryInfo.lat, country.countryInfo.long]}\r\n    pathOptions={{\r\n        color: casesTypeColors[casesType].hex,\r\n        fillColor: casesTypeColors[casesType].hex,\r\n      }}\r\n    fillOpacity={0.4}\r\n    radius={\r\n      Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n    }\r\n  >\r\n   <Popup>\r\n     <div>\r\n       <div className=\"info_flag\" style={{backgroundImage:`url(${country.countryInfo.flag})`}}></div>\r\n       <div className=\"info_country\">{country.country}</div>\r\n       <div className=\"info_Cases\">Cases:{numeral(country.cases).format(\"0.0\")}</div>\r\n       <div className=\"info_recovered\">Recovered:{numeral(country.recovered).format(\"0.0\")}</div>\r\n       <div className=\"info_deaths\">Deaths:{numeral(country.deaths).format(\"0.0\")}</div>\r\n     </div>\r\n   </Popup>\r\n</Circle>\r\n));\r\n  ","import React from 'react';\r\nimport { MapContainer, TileLayer,useMap  } from \"react-leaflet\";\r\nimport './Map.css'\r\nimport {showDataOnMap } from './util/helper';\r\n\r\nconst Map = ({center,zoom,casesType,countries}) => {\r\n   function ChangeView({ center, zoom }) {\r\n    const map = useMap();\r\n    map.setView(center, zoom);\r\n     return null;\r\n   }\r\n  return (\r\n    <div className=\"map_conatainer\">\r\n            <MapContainer center={center} zoom={zoom} casesType={casesType}>\r\n            <ChangeView center={center} zoom={zoom} />\r\n              <TileLayer\r\n               attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n               url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              />\r\n               {showDataOnMap(countries,casesType)}\r\n            </MapContainer>\r\n        </div>\r\n  )\r\n}\r\nexport default Map;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport {\r\n  MenuItem,\r\n  FormControl,\r\n  Select,\r\n  Card,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\nimport InfoBox from './InfoBox';\r\nimport Table from './Table';\r\nimport LineGraph  from \"./LineGraph\";\r\nimport { printSate, sortData } from \"./util/helper\";\r\nimport Map from \"./Map\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\n\r\nconst App = () => {\r\n  const [country, setInputCountry] = useState(\"worldwide\");\r\n  const [countries, setCountries] = useState([]);\r\n  const [countryInfo, setCountryInfo] = useState({});\r\n  const [TableInfo, setTableInfo] = useState([]);\r\n  const [MapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\r\n  const [MapZoom, setMapZoom] = useState(3);\r\n  const [mapCountries, setmapCountries] = useState([]);\r\n  const [casesType, setCasesType] = useState(\"cases\");\r\n    \r\n  useEffect(()=>{\r\n    fetch(\"https://disease.sh/v3/covid-19/all\")\r\n    .then((response)=>response.json())\r\n    .then((data)=>{\r\n        setCountryInfo(data)\r\n    })\r\n  },[])\r\n  useEffect(() => {\r\n    const getCountriesData = async () => {\r\n     await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const countries = data.map((country) => ({\r\n            name: country.country,\r\n            value: country.countryInfo.iso2,\r\n          }));\r\n          const sortedData=sortData(data);\r\n          setTableInfo(sortedData);\r\n          setCountries(countries);\r\n          setmapCountries(data);\r\n        });\r\n    };\r\n\r\n    getCountriesData();\r\n  }, []);\r\n\r\n  const onCountryChange = async (e) => {\r\n    const countryCode = e.target.value;\r\n    const url =\r\n    countryCode === \"worldwide\"\r\n      ? \"https://disease.sh/v3/covid-19/all\"\r\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n    await fetch(url)\r\n    .then((response)=>response.json())\r\n    .then((data)=>{\r\n        setInputCountry(countryCode);\r\n        setCountryInfo(data);\r\n        countryCode === \"worldwide\"\r\n        ? setMapCenter([34.80746, -40.4796])\r\n        : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n        setMapZoom(4);\r\n    })\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__left\">\r\n        <div className=\"app__header\">\r\n          <h1>COVID-19 Tracker</h1>\r\n          <FormControl className=\"app__dropdown\">\r\n            <Select\r\n              variant=\"outlined\"\r\n              value={country}\r\n              onChange={onCountryChange}\r\n            >\r\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\r\n              {countries.map((country,key) => (\r\n                <MenuItem key={key} value={country.value}>{country.name}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n        <div className=\"app_stats\">\r\n            <InfoBox \r\n                onClick={(e)=>setCasesType(\"cases\")} \r\n                active={casesType==='cases'}\r\n                Title=\"Coronavirus Cases\" \r\n                isRed\r\n                Cases={printSate(countryInfo.todayCases)} \r\n                Total={printSate(countryInfo.cases)}\r\n            />\r\n            <InfoBox \r\n                onClick={(e)=>setCasesType(\"recovered\")} \r\n                active={casesType === \"recovered\"}\r\n                Title=\"Recovered\" \r\n                Cases={printSate(countryInfo.todayRecovered)} \r\n                Total={printSate(countryInfo.recovered)}\r\n            />\r\n            <InfoBox \r\n              onClick={(e)=>setCasesType(\"deaths\")} \r\n              active={casesType === \"deaths\"}\r\n              Title=\"Death\" \r\n              isRed\r\n              Cases={printSate(countryInfo.todayDeaths)} \r\n              Total={printSate(countryInfo.deaths)}\r\n            />\r\n        </div>\r\n         <Map\r\n          casesType={casesType}\r\n          countries={mapCountries}\r\n          center={MapCenter}\r\n          zoom={MapZoom}\r\n        />\r\n      </div>\r\n    <div className=\"app__right\">\r\n        <Card>\r\n            <CardContent>\r\n                <h2>Cases By Country</h2>\r\n                <Table countries={TableInfo}/>\r\n                <h2>worldwide new {casesType}</h2>\r\n                <LineGraph className=\"app__graph\" CasesType={casesType}/>\r\n            </CardContent>\r\n        </Card>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}